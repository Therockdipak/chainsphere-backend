// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum ROLE {
  ADMIN
  USER
  SUPERADMIN
}

// model User {
//   id            Int       @id @default(autoincrement())
//   firstName     String
//   lastName      String
//   email         String    @unique
//   password      String
//   country       String
//   state         String
//   city          String
//   dob           String
//   roll          ROLE      @default(USER)
//   address       String
//   zipCode       String
//   ibiName       String
//   ibiId         String
//   isVerified    Boolean   @default(false)
//   otp           String?
//   otpExpiresAt  DateTime?
//   walletAddress String?   @unique
//   referralCode  String?    @unique

//   transactions Transaction[]
//   ambassador   Ambassador[]
//   coreTeamMembers   CoreTeamMembers[]

//   referrer Referral[] @relation(name: "Referrer")
//   referred Referral[] @relation(name: "Referred") // A user can refer multiple users
// }

model Transaction {
  id              Int      @id @default(autoincrement())
  transactionHash String   @unique
  amount          String
  price           String
  value           String
  status          String
  type            String
  userId          Int
  user            User     @relation(fields: [userId], references: [id])
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt()
}

model Ambassador {
  id     Int  @id @default(autoincrement())
  userId Int
  user   User @relation(fields: [userId], references: [id])
}

// model Referral {
//   id Int @id @default(autoincrement())

//   referrer   User @relation(name: "Referrer", fields: [referrerId], references: [id])
//   referrerId Int

//   referred   User @relation(name: "Referred", fields: [referredId], references: [id])
//   referredId Int  @unique

//   createdAt DateTime @default(now())
//   updatedAt DateTime @updatedAt()
// }


model User {
  id            Int       @id @default(autoincrement())
  firstName     String
  lastName      String
  email         String    @unique
  password      String
  country       String
  state         String
  city          String
  dob           String
  roll          ROLE      @default(USER)
  address       String
  zipCode       String
  isVerified    Boolean   @default(false)
  otp           String?
  otpExpiresAt  DateTime?
  walletAddress String?   @unique
  referralCode  String?   @unique
  documentId    String?
  documentFront String?
  documentBack  String?
  transactions  Transaction[]
  ambassador    Ambassador[]
  coreTeamMember CoreTeamMembers?

  referralsSent     Referral[] @relation(name: "Referrer") // Users referred by this user
  referralsReceived Referral[] @relation(name: "Referred") // User who referred this user
}

model Referral {
  id         Int  @id @default(autoincrement())
  
  referrer   User @relation(name: "Referrer", fields: [referrerId], references: [id])
  referrerId Int

  referred   User @relation(name: "Referred", fields: [referredId], references: [id])
  referredId Int  @unique

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt()
}

model CoreTeamMembers {
  id     Int  @id @default(autoincrement())
  userId Int  @unique
  user   User @relation(fields: [userId], references: [id])
}


model Admin{
  id       Int      @id    @default(autoincrement())
  name     String   

}




